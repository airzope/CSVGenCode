/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#include <iostream>
#include <map>
#include <stdlib.h>
#include <iomanip>
#if defined(_WIN32) || defined(_WIN64)
#else
#endif
#include "ConfigImpl.h"
#include "CSVParser.h"
using namespace std;

const char* CCFG_VipLevelTest::FILE_NAME   = "vip_level_test.csv";
int CCFG_VipLevelTest::Load(const char* szDir)
{
	try
	{
		std::string szFileName(szDir);
    	szFileName = szFileName + "/" + CCFG_VipLevelTest::FILE_NAME;
		csv::CSVParser oParser = csv::CSVParser(szFileName);
		for (int i = 2; i < oParser.RowCount(); ++i) {
			SCFG_VipLevelTest conent;
		    int nColumn = 0;
		    int id1 = oParser.ReadInt32(i, 0);
		    int llKey = id1;
			conent.id1 = oParser.ReadInt32(i, nColumn++);
			conent.id2 = oParser.ReadString(i, nColumn++);
			conent.id3 = oParser.ReadInt32(i, nColumn++);
			conent.id4 = oParser.ReadString(i, nColumn++);
			conent.id6 = oParser.ReadString(i, nColumn++);

		    m_mapContent[llKey] = conent;
		}
	}
	catch (const std::exception&)
	{
		return -1;
	}
	return 0;
}
const SCFG_VipLevelTest *CCFG_VipLevelTest::Find(int	id1) const
{
	int llKey = id1;

	auto it = m_mapContent.find(llKey);
	if (it != m_mapContent.end())
	{
		return &it->second;
	}
	return NULL;
}

int CCFG_VipLevelTest::Print() const
{
    const int MAX_FIELD_WIDTH  = 16;
	cout << "------------------------- VipLevelTest [" << m_mapContent.size() << "] ------------------------------" << endl;
	cout << setiosflags(ios::left);
	cout << setw(MAX_FIELD_WIDTH) << "id1";
	cout << setw(MAX_FIELD_WIDTH) << "id2";
	cout << setw(MAX_FIELD_WIDTH) << "id3";
	cout << setw(MAX_FIELD_WIDTH) << "id4";
	cout << setw(MAX_FIELD_WIDTH) << "id6";

	cout << endl;
	for(auto it = m_mapContent.begin(); it != m_mapContent.end();it++)
	{
		auto val = it->second;
		cout << setw(MAX_FIELD_WIDTH) << val.id1;
		cout << setw(MAX_FIELD_WIDTH) << val.id2;
		cout << setw(MAX_FIELD_WIDTH) << val.id3;
		cout << setw(MAX_FIELD_WIDTH) << val.id4;
		cout << setw(MAX_FIELD_WIDTH) << val.id6;

		cout << endl;
	}
	return 0;
}

const char* CCFG_VipLevelTest2::FILE_NAME   = "vip_level_test2.csv";
int CCFG_VipLevelTest2::Load(const char* szDir)
{
	try
	{
		std::string szFileName(szDir);
    	szFileName = szFileName + "/" + CCFG_VipLevelTest2::FILE_NAME;
		csv::CSVParser oParser = csv::CSVParser(szFileName);
		for (int i = 2; i < oParser.RowCount(); ++i) {
			SCFG_VipLevelTest2 conent;
		    int nColumn = 0;
		    int id1 = oParser.ReadInt32(i, 0);
		    int llKey = id1;
			conent.id1 = oParser.ReadInt32(i, nColumn++);
			conent.id2 = oParser.ReadString(i, nColumn++);
			conent.id3 = oParser.ReadInt32(i, nColumn++);
			conent.id4 = oParser.ReadString(i, nColumn++);
			conent.id6 = oParser.ReadString(i, nColumn++);

		    m_mapContent[llKey] = conent;
		}
	}
	catch (const std::exception&)
	{
		return -1;
	}
	return 0;
}
const SCFG_VipLevelTest2 *CCFG_VipLevelTest2::Find(int	id1) const
{
	int llKey = id1;

	auto it = m_mapContent.find(llKey);
	if (it != m_mapContent.end())
	{
		return &it->second;
	}
	return NULL;
}

int CCFG_VipLevelTest2::Print() const
{
    const int MAX_FIELD_WIDTH  = 16;
	cout << "------------------------- VipLevelTest2 [" << m_mapContent.size() << "] ------------------------------" << endl;
	cout << setiosflags(ios::left);
	cout << setw(MAX_FIELD_WIDTH) << "id1";
	cout << setw(MAX_FIELD_WIDTH) << "id2";
	cout << setw(MAX_FIELD_WIDTH) << "id3";
	cout << setw(MAX_FIELD_WIDTH) << "id4";
	cout << setw(MAX_FIELD_WIDTH) << "id6";

	cout << endl;
	for(auto it = m_mapContent.begin(); it != m_mapContent.end();it++)
	{
		auto val = it->second;
		cout << setw(MAX_FIELD_WIDTH) << val.id1;
		cout << setw(MAX_FIELD_WIDTH) << val.id2;
		cout << setw(MAX_FIELD_WIDTH) << val.id3;
		cout << setw(MAX_FIELD_WIDTH) << val.id4;
		cout << setw(MAX_FIELD_WIDTH) << val.id6;

		cout << endl;
	}
	return 0;
}


