/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#include <iostream>
#include <map>
#include <stdlib.h>
#include <iomanip>
#if defined(_WIN32) || defined(_WIN64)
#else
#endif
#include "ConfigImpl.h"
#include "CSVParser.h"
using namespace std;

#Begin_Replace_Tag_Class
const char* #ClsName::FILE_NAME   = "#RawFileName.csv";
int #ClsName::Load(const char* szDir)
{
	try
	{
		std::string szFileName(szDir);
    	szFileName = szFileName + "/" + #ClsName::FILE_NAME;
		csv::CSVParser oParser = csv::CSVParser(szFileName);
		for (int i = 2; i < oParser.RowCount(); ++i) {
			#StructName conent;
		    int nColumn = 0;
		    #KeyTypeName #KeyName = oParser.#KeyType2FuncName(i, #KeyTypeColIdx);
		    #KeyTypeName llKey = #KeyName;
#Begin_Replace_Tag_Attri
			conent.#AttriName = oParser.#AttriType2FuncName(i, nColumn++);
#End_Replace_Tag_Attri
		    m_mapContent[llKey] = conent;
		}
	}
	catch (const std::exception&)
	{
		return -1;
	}
	return 0;
}
const #StructName *#ClsName::Find(#KeyTypeName	#KeyName) const
{
	#KeyTypeName llKey = #KeyName;

	auto it = m_mapContent.find(llKey);
	if (it != m_mapContent.end())
	{
		return &it->second;
	}
	return NULL;
}

int #ClsName::Print() const
{
    const int MAX_FIELD_WIDTH  = 16;
	cout << "------------------------- #FileName [" << m_mapContent.size() << "] ------------------------------" << endl;
	cout << setiosflags(ios::left);
#Begin_Replace_Tag_Attri
	cout << setw(MAX_FIELD_WIDTH) << "#AttriName";
#End_Replace_Tag_Attri
	cout << endl;
	for(auto it = m_mapContent.begin(); it != m_mapContent.end();it++)
	{
		auto val = it->second;
#Begin_Replace_Tag_Attri
		cout << setw(MAX_FIELD_WIDTH) << val.#AttriName;
#End_Replace_Tag_Attri
		cout << endl;
	}
	return 0;
}

#End_Replace_Tag_Class
