/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace CSVGenCode {
    public enum ECSVReadResult {
        Succ,
        FailedUnkonw,
        FileOpenError,
        FormatError,
    }
#Begin_Replace_Tag_Class
    public class #ClsName {
        public ECSVReadResult Load(string path) {
            var csvText = File.ReadAllText(path, Encoding.UTF8);
            if (string.IsNullOrEmpty(csvText))
                return ECSVReadResult.FileOpenError;
            string[][] grid = CsvParser.Parse(csvText);
            if (grid == null )  return ECSVReadResult.FormatError;
            int rowLen = grid.Length;
            if (rowLen < 1)  return ECSVReadResult.FormatError;
            int colLen = grid[0].Length;
            if (colLen < 1)   return ECSVReadResult.FormatError;
            var parser = new StringParser(grid);
            int keyIdx = 0;
            for (int i = 3; i < rowLen; i++) {
                var info = new #StructName();
                var key = parser.#KeyType2FuncName(i, keyIdx);
                int colIdx = 0;
#Begin_Replace_Tag_Attri
                info.#AttriName = parser.#AttriType2FuncName(i, colIdx++);
#End_Replace_Tag_Attri
                _mapContent.Add(key, info);
            }
            return ECSVReadResult.Succ;
        }

        public #StructName Find(#KeyTypeName	#KeyName)
        {
            #StructName ret = null;
            _mapContent.TryGetValue(#KeyName,out ret);
            return ret;
        }

        public void Clear() { _mapContent.Clear(); }
        public void ToString(StringBuilder sb) {
            sb.AppendLine("---------------------------------------- #FileName---------------------------------------");
            foreach (var item in _mapContent) {
                var info = item.Value;
#Begin_Replace_Tag_Attri
                sb.Append("\t\t" + info.#AttriName);
#End_Replace_Tag_Attri
                sb.AppendLine();
            }
        }

        private Dictionary<#KeyTypeName, #StructName> _mapContent = new Dictionary<#KeyTypeName, #StructName>();
    }
#End_Replace_Tag_Class
}
